#include "stdio.h"
#include "stdlib.h"
#include <fstream>
#include <string>
#include <stdexcept>

using namespace std;


static const char* prologue = 
	"// \n"
	"// *** DO NOT EDIT THIS FILE DIRECTLY *** \n"
	"// \n"
	"// This file is auto-generated from the source XML '%s'.\n"
	"// Edit the source XML file if you need to change the definitions.\n"
	"// \n"
	"\n"
	"static const char %s[] = \n";

static const char* epilogue = 
	"\n;\n";

int main( int argc, char* argv[] )
{
	try{
		if( argc != 4 ){
			throw runtime_error(
				"Parameters are not valid.\n"
				"Usage: XML2CHeader <Input File Name> <Output File Name> <Variable Name>\n"
				"Ex.: XML2CHeader DefaultParam.xml DefaultParam.h g_defaultParam"
			);
		}

		// Open an input file.
		string inputFileName = argv[1];
		ifstream input( inputFileName.c_str() );
		if( !input.is_open() ){
			string msg;
			msg += "Could not open '" + inputFileName + "'\n";
			throw runtime_error( msg );
		}

		// Open an output file.
		string outputFileName = argv[2];
		ofstream output( outputFileName.c_str() );
		if( !output.is_open() ){
			string msg;
			msg += "Could not open '" + outputFileName + "'\n";
			throw runtime_error( msg );
		}

		// Output prologue.
		string variableName = argv[3];

		if( inputFileName.size() > 1024 || variableName.size() > 1024 ) {
			throw runtime_error( "The specified input file name or variable name is too long.\n" );
		}

		char prologueBuf[ 4096 ];
		sprintf( prologueBuf, prologue, inputFileName.c_str(), variableName.c_str() );
		output << prologueBuf;

		string line;
		while( getline( input, line ) ){
			output << "\"";
			
			for( string::iterator i = line.begin(); i != line.end(); ++i ){
				// Escape
				switch( *i ){
				case '\"':
					output << "\\\"";
					break;
				case '\\':
					output << "\\";
					break;
				case '\n':
				case '\r':
					break;
				default:
					output << *i;
					break;
				}
			}

			output << "\\n\"\n";
		}

		output << epilogue;
	}
	catch( const runtime_error& e ){
		printf( "%s", e.what() );
		return 1;
	}
	return 0;
}

